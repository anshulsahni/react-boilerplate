/**
 * DEVELOPMENT WEBPACK CONFIGURATION
 */

const path = require('path');
const fs = require('fs');
const webpack = require('webpack');
const cheerio = require('cheerio');
const log = require('logem');

const HtmlWebpackPlugin = require('html-webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');


const config = require('../config.json');

const plugins = [
  /* Tell webpack we want hot reloading */
  new webpack.HotModuleReplacementPlugin(),

  /* to prevent re-loading when there is an error while transpiling */
  new webpack.NoErrorsPlugin(),

  /* HtmlWebpackPlugin to generate index.html from the given template */
  new HtmlWebpackPlugin({
    /* Inject all files that are generated by webpack, e.g. bundle.js */
    inject: true,
    templateContent: templateContent(),
  }),

  /* plugin to check that there isn't any circular dependency in app */
  new CircularDependencyPlugin({
    /* exclude node_modules */
    exclude: /a\.js|node_modules/,

    /* show a warning when there is a circular dependency */
    failOnError: false,
  }),
];

module.exports = require('./webpack.base.babel')({
  // Add hot reloading in development
  entry: [
    'eventsource-polyfill', // Necessary for hot reloading with IE
    'webpack-hot-middleware/client?reload=true',
    path.join(process.cwd(), 'src/index.js'), // Start with src/index.js
  ],

  // Don't use hashes in dev mode for better performance
  output: {
    filename: '[name].js',
    chunkFilename: '[name].chunk.js',
  },

  // Add development plugins
  plugins: dependencyHandlers().concat(plugins),

  // Tell babel that we want to hot-reload
  babelQuery: {
    // require.resolve solves the issue of relative presets when dealing with
    // locally linked packages. This is an issue with babel and webpack.
    // See https://github.com/babel/babel-loader/issues/149 and
    // https://github.com/webpack/webpack/issues/1866
    presets: ['babel-preset-react-hmre'].map(require.resolve),
  },

  // Emit a source map for easier debugging
  devtool: 'cheap-module-eval-source-map',

  performance: {
    hints: false,
  },
});

function dependencyHandlers() {
  const dllOutputPath = path.resolve(config.dllOutputPath);
  const manifestPath = path.resolve(dllOutputPath, 'main.json');

  if (!fs.existsSync(manifestPath)) {
    log.error('The DLL manifest is missing. Please run `npm run build:dll`');
    process.exit(0);
  }

  return [
    new webpack.DllReferencePlugin({
      context: process.cwd(),
      manifest: require(manifestPath), // eslint-disable-line global-require
    }),
  ];
}

/**
 * We dynamically generate the HTML content in development so that the different
 * DLL Javascript files are loaded in script tags and available to our application.
 */
function templateContent() {
  const html = fs.readFileSync(
    path.resolve(process.cwd(), 'app/index.html')
  ).toString();

  const doc = cheerio(html);
  const body = doc.find('body');

  body.append('<script data-dll="true" src="/main.dll.js"></script>');

  return doc.toString();
}
